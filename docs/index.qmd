---
jupyter: python3
---

# xraypy

Useful functions

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)
<!-- badges: end -->

## Installation

```bash
python -m pip install git+https://github.com/uskovgs/xraypy.git
```

## Usage

This module is designed for correct rounding of numbers.

The primary functions are latex_range and latex_range_sci.

### Numbers without exponents

```{python}
import numpy as np
import pandas as pd
from xraypy.latex_table import latex_range, latex_range_sci

B=3
x = np.random.uniform(1, 10, size=B)
err_lo = np.random.uniform(0, 1, size=B)
err_up = np.random.uniform(0, 1, size=B)
xmin = x - err_lo
xmax = x + err_up
```


Non symmetric errors:
```{python}
pd.DataFrame({
    "x" : x,
    "xmin" : xmin,
    "xmax" : xmax,
    "latex": latex_range(x, xmin, xmax)
})
```

Symemtric errors:
```{python}
xmax = x + err_lo
pd.DataFrame({
    "x" : x,
    "xmin" : xmin,
    "xmax" : xmax,
    "latex": latex_range(x, xmin, xmax)
})
```

### Numbers with exponents

```{python}
x = np.array([1e21, 3e22, 1e23])
err = np.array([0.1e21, 0.5e21, 0.1e23])
```

Auto number of digits

```{python}
pd.DataFrame({
    "x" : x,
    "err": err,
    "latex": latex_range_sci(x, x-err, x+err)
})
```

Fixed number of digits

```{python}
pd.DataFrame({
    "x" : x,
    "err": err,
    "latex": latex_range_sci(x, x-err, x+err, ndigits=3)
})
```

Make errors symmetric if possible

```{python}
pd.DataFrame({
    "x" : x,
    "err": err,
    "latex": latex_range_sci(x, x-err, x+err, ndigits='auto', symmetry=True)
})
```

The same power

```{python}
pd.DataFrame({
    "x" : x,
    "err": err,
    "latex": latex_range_sci(x, x-err, x+err, ndigits='auto', symmetry=True, base_pow=22)
})
```